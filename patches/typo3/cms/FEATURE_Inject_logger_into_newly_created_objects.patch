Index: typo3/sysext/core/Classes/Utility/GeneralUtility.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Classes/Utility/GeneralUtility.php	(date 1515879118000)
+++ typo3/sysext/core/Classes/Utility/GeneralUtility.php	(date 1505045171000)
@@ -15,11 +15,13 @@
  */
 
 use GuzzleHttp\Exception\RequestException;
+use Psr\Log\LoggerAwareInterface;
 use TYPO3\CMS\Core\Core\ApplicationContext;
 use TYPO3\CMS\Core\Core\ClassLoadingInformation;
 use TYPO3\CMS\Core\Crypto\Random;
 use TYPO3\CMS\Core\Database\ConnectionPool;
 use TYPO3\CMS\Core\Http\RequestFactory;
+use TYPO3\CMS\Core\Log\LogManager;
 use TYPO3\CMS\Core\Service\OpcodeCacheService;
 use TYPO3\CMS\Core\SingletonInterface;
 use TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface;
@@ -3907,6 +3909,9 @@
         if ($instance instanceof SingletonInterface) {
             self::$singletonInstances[$finalClassName] = $instance;
         }
+        if ($instance instanceof LoggerAwareInterface) {
+            $instance->setLogger(static::makeInstance(LogManager::class)->getLogger($className));
+        }
         return $instance;
     }
 
Index: typo3/sysext/core/Documentation/Changelog/master/Feature-82441-InjectLoggerWhenCreatingObjects.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Documentation/Changelog/master/Feature-82441-InjectLoggerWhenCreatingObjects.rst	(date 1505045171000)
+++ typo3/sysext/core/Documentation/Changelog/master/Feature-82441-InjectLoggerWhenCreatingObjects.rst	(date 1505045171000)
@@ -0,0 +1,36 @@
+.. include:: ../../Includes.txt
+
+=====================================================
+Feature: #82441 - Inject logger when creating objects
+=====================================================
+
+See :issue:`82441`
+
+Description
+===========
+
+Classes that implement :php:`\Psr\Log\LoggerAwareInterface` automatically
+get a logger instance injected when a class instance is created via
+:php:`GeneralUtility::makeInstance()` and :php:`ObjectManger::get()`.
+
+For developer convenience the :php:`\Psr\Log\LoggerAwareTrait` can be used.
+The trait adds a public :php:`setLogger()` and a protected :php:`$logger` property
+to the class, no further code is needed to successfully implement the interface.
+
+A minimal example looks like this (example from a test case fixture):
+
+.. code-block:: php
+
+<?php
+declare(strict_types=1);
+namespace TYPO3\CMS\Core\Tests\Unit\Utility\Fixtures;
+
+use Psr\Log\LoggerAwareInterface;
+use Psr\Log\LoggerAwareTrait;
+
+class GeneralUtilityMakeInstanceInjectLoggerFixture implements LoggerAwareInterface
+{
+    use LoggerAwareTrait;
+}
+
+.. index:: PHP-API
\ No newline at end of file
Index: typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityMakeInstanceInjectLoggerFixture.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityMakeInstanceInjectLoggerFixture.php	(date 1505045171000)
+++ typo3/sysext/core/Tests/Unit/Utility/Fixtures/GeneralUtilityMakeInstanceInjectLoggerFixture.php	(date 1505045171000)
@@ -0,0 +1,36 @@
+<?php
+declare(strict_types=1);
+namespace TYPO3\CMS\Core\Tests\Unit\Utility\Fixtures;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use Psr\Log\LoggerAwareInterface;
+use Psr\Log\LoggerAwareTrait;
+use Psr\Log\LoggerInterface;
+
+/**
+ * Fixture for a class which gets logger injected
+ */
+class GeneralUtilityMakeInstanceInjectLoggerFixture implements LoggerAwareInterface
+{
+    use LoggerAwareTrait;
+
+    /**
+     * @return LoggerInterface
+     */
+    public function getLogger(): LoggerInterface
+    {
+        return $this->logger;
+    }
+}
