Index: typo3/sysext/core/Classes/Configuration/ConfigurationManager.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Classes/Configuration/ConfigurationManager.php	(date 1516635149000)
+++ typo3/sysext/core/Classes/Configuration/ConfigurationManager.php	(date 1509619600000)
@@ -272,6 +272,30 @@
         return $result;
     }
 
+    /**
+     * Enables a certain feature and writes the option to LocalConfiguration.php
+     * Short-hand method
+     *
+     * @param string $featureName something like "InlineSvgImages"
+     * @return bool true on successful writing the setting
+     */
+    public function enableFeature(string $featureName): bool
+    {
+        return $this->setLocalConfigurationValueByPath('SYS/features/' . $featureName, true);
+    }
+
+    /**
+     * Disables a feature and writes the option to LocalConfiguration.php
+     * Short-hand method
+     *
+     * @param string $featureName something like "InlineSvgImages"
+     * @return bool true on successful writing the setting
+     */
+    public function disableFeature(string $featureName): bool
+    {
+        return $this->setLocalConfigurationValueByPath('SYS/features/' . $featureName, false);
+    }
+
     /**
      * Checks if the configuration can be written.
      *
Index: typo3/sysext/core/Classes/Configuration/Features.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Classes/Configuration/Features.php	(date 1509619600000)
+++ typo3/sysext/core/Classes/Configuration/Features.php	(date 1509619600000)
@@ -0,0 +1,65 @@
+<?php
+declare(strict_types=1);
+namespace TYPO3\CMS\Core\Configuration;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+/**
+ * A lightweight API class to check if a feature is enabled.
+ *
+ * Features are simple options (true/false), and are stored in the
+ * global configuration array $TYPO3_CONF_VARS[SYS][features].
+ *
+ * For disabling or enabling a feature the "ConfigurationManager"
+ * should be used.
+ *
+ * -- Naming --
+ *
+ * Feature names should NEVER named "enable" or having a negation, or containing versions or years
+ *    "enableFeatureXyz"
+ *    "disableOverlays"
+ *    "schedulerRevamped"
+ *    "useDoctrineQueries"
+ *    "disablePreparedStatements"
+ *    "disableHooksInFE"
+ *
+ * Proper namings for features
+ *    "ExtendedRichtextFormat"
+ *    "NativeYamlParser"
+ *    "InlinePageTranslations"
+ *    "TypoScriptParserIncludesAsXml"
+ *    "NativeDoctrineQueries"
+ *
+ * Ideally, these feature switches are added via the Install Tool or via FactoryConfiguration
+ * and can be used for Extensions as well.
+ *
+ * --- Usage ---
+ *
+ * if (GeneralUtility::makeInstance(Features::class)->isFeatureEnabled('InlineSvg')) {
+ *   ... do stuff here ...
+ * }
+ */
+class Features
+{
+    /**
+     * Checks if a feature is active
+     *
+     * @param string $featureName the name of the feature
+     * @return bool
+     */
+    public function isFeatureEnabled(string $featureName): bool
+    {
+        return isset($GLOBALS['TYPO3_CONF_VARS']['SYS']['features'][$featureName]) && $GLOBALS['TYPO3_CONF_VARS']['SYS']['features'][$featureName] === true;
+    }
+}
Index: typo3/sysext/core/Configuration/DefaultConfiguration.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Configuration/DefaultConfiguration.php	(date 1516635149000)
+++ typo3/sysext/core/Configuration/DefaultConfiguration.php	(date 1509619600000)
@@ -68,6 +68,7 @@
         ],
         'fileCreateMask' => '0664',
         'folderCreateMask' => '2775',
+        'features' => [],
         'createGroup' => '',
         'sitename' => 'TYPO3',
         'encryptionKey' => '',
Index: typo3/sysext/core/Documentation/Changelog/master/Feature-83429-FeatureToggles.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Documentation/Changelog/master/Feature-83429-FeatureToggles.rst	(date 1509619600000)
+++ typo3/sysext/core/Documentation/Changelog/master/Feature-83429-FeatureToggles.rst	(date 1509619600000)
@@ -0,0 +1,40 @@
+.. include:: ../../Includes.txt
+
+=================================
+Feature: #83429 - Feature Toggles
+=================================
+
+See :issue:`83429`
+
+Description
+===========
+
+In order to allow better support for alternative functionality while keeping old functionality, a new API
+for enabling installation-wide features - called "Feature Toggle" - has been added.
+
+The new API checks against a system-wide option array within :php:`$TYPO3_CONF_VARS['SYS']['features']` which can be
+enabled system-wide. Both TYPO3 Core and Extensions can then provide alternative functionality for a certain
+feature.
+
+Features are usually breaking changes for a minor version / sprint release, which site administrators can enable
+at their own risk, or stay fully compatible with third-party extensions.
+
+Examples for having features are:
+* Throw exceptions on certain occasions instead of just returning a string message as error message.
+* Disable obsolete functionality which might still be used, but slows down the system.
+* Enable alternative PageNotFound handling for an installation.
+
+
+Impact
+======
+
+Features are documented for TYPO3 Core. For extension authors, the API can be used for any custom
+feature provided by an extension:
+
+.. code-block:: php
+
+	if (GeneralUtility::makeInstance(Features::class)->isFeatureEnabled('myFeatureName')) {
+		// do custom processing
+	}
+
+.. index:: LocalConfiguration, PHP-API
Index: typo3/sysext/core/Tests/Unit/Configuration/FeaturesTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Tests/Unit/Configuration/FeaturesTest.php	(date 1509619600000)
+++ typo3/sysext/core/Tests/Unit/Configuration/FeaturesTest.php	(date 1509619600000)
@@ -0,0 +1,64 @@
+<?php
+declare(strict_types=1);
+namespace TYPO3\CMS\Core\Tests\Unit\Configuration;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Core\Configuration\Features;
+use TYPO3\TestingFramework\Core\Unit\UnitTestCase;
+
+/**
+ * Test case
+ */
+class FeaturesTest extends UnitTestCase
+{
+    /**
+     * @test
+     */
+    public function nonExistingFeatureReturnsFalse()
+    {
+        $features = new Features();
+        $this->assertFalse($features->isFeatureEnabled('nonExistingFeature'));
+    }
+
+    /**
+     * @test
+     */
+    public function checkIfExistingDisabledFeatureIsDisabled()
+    {
+        $GLOBALS['TYPO3_CONF_VARS']['SYS']['features']['nativeFunctionality'] = false;
+        $features = new Features();
+        $this->assertFalse($features->isFeatureEnabled('nativeFunctionality'));
+    }
+
+    /**
+     * @test
+     */
+    public function checkIfExistingEnabledFeatureIsEnabled()
+    {
+        $GLOBALS['TYPO3_CONF_VARS']['SYS']['features']['nativeFunctionality'] = true;
+        $features = new Features();
+        $this->assertTrue($features->isFeatureEnabled('nativeFunctionality'));
+    }
+
+    /**
+     * @test
+     */
+    public function checkIfExistingEnabledFeatureIsDisabled()
+    {
+        $GLOBALS['TYPO3_CONF_VARS']['SYS']['features']['nativeFunctionality'] = false;
+        $features = new Features();
+        $this->assertFalse($features->isFeatureEnabled('nativeFunctionality'));
+    }
+}
