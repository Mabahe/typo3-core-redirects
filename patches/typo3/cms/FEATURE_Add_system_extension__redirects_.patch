Index: composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- composer.json	(date 1505045171000)
+++ composer.json	(date 1515879118000)
@@ -169,6 +169,7 @@
 			"TYPO3\\CMS\\Opendocs\\": "typo3/sysext/opendocs/Classes/",
 			"TYPO3\\CMS\\Recordlist\\": "typo3/sysext/recordlist/Classes/",
 			"TYPO3\\CMS\\Recycler\\": "typo3/sysext/recycler/Classes/",
+			"TYPO3\\CMS\\Redirects\\": "typo3/sysext/redirects/Classes/",
 			"TYPO3\\CMS\\Reports\\": "typo3/sysext/reports/Classes/",
 			"TYPO3\\CMS\\Rsaauth\\": "typo3/sysext/rsaauth/Classes/",
 			"TYPO3\\CMS\\RteCKEditor\\": "typo3/sysext/rte_ckeditor/Classes/",
Index: typo3/sysext/core/Classes/Utility/HttpUtility.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Classes/Utility/HttpUtility.php	(date 1505045171000)
+++ typo3/sysext/core/Classes/Utility/HttpUtility.php	(date 1515879118000)
@@ -14,6 +14,8 @@
  * The TYPO3 project - inspiring people to share!
  */
 
+use Psr\Http\Message\ResponseInterface;
+
 /**
  * HTTP Utility class
  */
@@ -119,4 +121,22 @@
             (isset($urlParts['query']) ? '?' . $urlParts['query'] : '') .
             (isset($urlParts['fragment']) ? '#' . $urlParts['fragment'] : '');
     }
+
+    /**
+     * Send Response to client and exit
+     *
+     * @param ResponseInterface $response
+     * @internal not part of public/stable API yet
+     */
+    public static function sendResponse(ResponseInterface $response)
+    {
+        if (!headers_sent()) {
+            header('HTTP/' . $response->getProtocolVersion() . ' ' . $response->getStatusCode() . ' ' . $response->getReasonPhrase());
+            foreach ($response->getHeaders() as $name => $values) {
+                header($name . ': ' . implode(', ', $values));
+            }
+        }
+        echo $response->getBody()->__toString();
+        exit;
+    }
 }
Index: typo3/sysext/core/Configuration/DefaultConfiguration.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Configuration/DefaultConfiguration.php	(date 1505045171000)
+++ typo3/sysext/core/Configuration/DefaultConfiguration.php	(date 1515879118000)
@@ -68,7 +68,9 @@
         ],
         'fileCreateMask' => '0664',
         'folderCreateMask' => '2775',
-        'features' => [],
+        'features' => [
+            'redirects.hitCount' => false
+        ],
         'createGroup' => '',
         'sitename' => 'TYPO3',
         'encryptionKey' => '',
Index: typo3/sysext/core/Documentation/Changelog/master/Feature-83631-SystemExtensionRedirectsHasBeenAdded.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Documentation/Changelog/master/Feature-83631-SystemExtensionRedirectsHasBeenAdded.rst	(date 1515879118000)
+++ typo3/sysext/core/Documentation/Changelog/master/Feature-83631-SystemExtensionRedirectsHasBeenAdded.rst	(date 1515879118000)
@@ -0,0 +1,44 @@
+.. include:: ../../Includes.txt
+
+=============================================================
+Feature: #83631 - System Extension "redirects" has been added
+=============================================================
+
+See :issue:`83631`
+
+Description
+===========
+
+A new system extension "redirects" has been added, which ships a flexible handling of HTTP redirects,
+useful both for marketeers and site administrators.
+
+It adds a new module called "Redirects" (under a new main module called "Site Management").
+
+A new DB table "sys_redirect" is added, which allows to configure a redirect from a source
+(host+path) to a destination target. The destination target can be any kind of Uri (used by the LinkService).
+
+Any time a redirect is added or modified, a list of all redirects is added to the cache management,
+allowing to fetch all redirects at once, reducing the number of queries to the DB in the frontend to 1 query
+(or to one query to the file system, as the power lies in the caching framework).
+
+A simple hit statistics counter is implemented as well.
+
+
+Impact
+======
+
+A system extension "Redirects" was added with the following features:
+
+* A new sub module "Redirects"
+* Possibility to add redirects with the following caveats
+** Source may be a specific domain, domain with port or "any" domain
+** Source Path may be an absolute path (`/foo/bar/`) or a regular expression (`#f(+*?)#`)
+** Target may be selected with the link wizard (and may be a page, file, folder or external URL)
+* The target can be forced to HTTPS only
+* The status code of the redirect can be configured per redirect
+* Existing GET variables can be kept through the redirect
+* Redirects can be set up for specific time frames or indefinitely
+* An `X-Redirect-By: TYPO3` header is added to each redirect initiated by the module
+* A simple database based hit counter shows how often a redirect was executed and may be manually resetted
+
+.. index:: Backend, Frontend, NotScanned
Index: typo3/sysext/core/Documentation/Changelog/master/Feature-83677-GloballyDisableenableRedirectHitStatistics.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/core/Documentation/Changelog/master/Feature-83677-GloballyDisableenableRedirectHitStatistics.rst	(date 1515879118000)
+++ typo3/sysext/core/Documentation/Changelog/master/Feature-83677-GloballyDisableenableRedirectHitStatistics.rst	(date 1515879118000)
@@ -0,0 +1,30 @@
+.. include:: ../../Includes.txt
+
+=================================================================
+Feature: #83677 - Globally disable/enable redirect hit statistics
+=================================================================
+
+See :issue:`83677`
+
+Description
+===========
+
+The redirects module provides the optional feature to count hits on redirects. On most installations this will probably be achieved using analytics tools such as Google Analytics, Piwik or alike - for those not using any other ways of measuring, counting hits can be enabled with a feature switch.
+
+
+Impact
+======
+
+Redirect hit counting can be enabled by setting
+
+.. code-block:: php
+
+	'SYS' => [
+		'features' => [
+			'redirects.hitCount' => true
+		],
+	],
+
+Be aware that every hit on a redirect will result in an additional SQL `UPDATE` query.
+
+.. index:: Database, Frontend, LocalConfiguration, NotScanned
\ No newline at end of file
Index: typo3/sysext/redirects/Classes/Controller/ManagementController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/Controller/ManagementController.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/Controller/ManagementController.php	(date 1515879118000)
@@ -0,0 +1,190 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\Controller;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use Psr\Http\Message\ResponseInterface;
+use Psr\Http\Message\ServerRequestInterface;
+use TYPO3\CMS\Backend\Routing\UriBuilder;
+use TYPO3\CMS\Backend\Template\Components\ButtonBar;
+use TYPO3\CMS\Backend\Template\ModuleTemplate;
+use TYPO3\CMS\Backend\Utility\BackendUtility;
+use TYPO3\CMS\Core\Authentication\BackendUserAuthentication;
+use TYPO3\CMS\Core\Configuration\Features;
+use TYPO3\CMS\Core\Http\Response;
+use TYPO3\CMS\Core\Imaging\Icon;
+use TYPO3\CMS\Core\Imaging\IconFactory;
+use TYPO3\CMS\Lang\LanguageService;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3\CMS\Fluid\View\StandaloneView;
+use TYPO3\CMS\Redirects\Service\RedirectCacheService;
+use TYPO3\CMS\Redirects\Service\UrlService;
+use TYPO3Fluid\Fluid\View\ViewInterface;
+
+/**
+ * Lists all redirects in the TYPO3 Backend as a module
+ */
+class ManagementController
+{
+    /**
+     * ModuleTemplate object
+     *
+     * @var ModuleTemplate
+     */
+    protected $moduleTemplate;
+
+    /**
+     * @var ViewInterface
+     */
+    protected $view;
+
+    /**
+     * @var ServerRequestInterface
+     */
+    protected $request;
+
+    /**
+     * @var IconFactory
+     */
+    protected $iconFactory;
+
+    /**
+     * Instantiate the form protection before a simulated user is initialized.
+     */
+    public function __construct()
+    {
+        $this->moduleTemplate = GeneralUtility::makeInstance(ModuleTemplate::class);
+        $this->moduleTemplate->getPageRenderer()->loadRequireJsModule('TYPO3/CMS/Backend/Modal');
+        $this->iconFactory = GeneralUtility::makeInstance(IconFactory::class);
+        $this->getLanguageService()->includeLLFile('EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf');
+    }
+
+    /**
+     * Injects the request object for the current request, and renders the overview of all redirects
+     *
+     * @param ServerRequestInterface $request the current request
+     * @return ResponseInterface the response with the content
+     */
+    public function handleRequest(ServerRequestInterface $request): ResponseInterface
+    {
+        $this->request = $request;
+        $action = $request->getQueryParams()['action'] ?? $request->getParsedBody()['action'] ?? 'overview';
+        $this->initializeView($action);
+
+        $result = call_user_func_array([$this, $action . 'Action'], [$request]);
+        if ($result instanceof ResponseInterface) {
+            return $result;
+        }
+        $this->moduleTemplate->setContent($this->view->render());
+
+        $response = new Response('php://temp', 200, [
+            'Content-Type' => 'text/html; charset=utf-8',
+            'Cache-Control' => 'no-cache, must-revalidate',
+            'Pragma' => 'no-cache'
+        ]);
+        $response->getBody()->write($this->moduleTemplate->renderContent());
+
+        return $response;
+    }
+
+    /**
+     * Show all redirects, and add a button to create a new redirect
+     */
+    protected function overviewAction()
+    {
+        $this->getButtons();
+
+        $redirects = GeneralUtility::makeInstance(RedirectCacheService::class)->getAllRedirects();
+        $defaultUrl = GeneralUtility::makeInstance(UrlService::class)->getDefaultUrl();
+        $showHitCounter = GeneralUtility::makeInstance(Features::class)->isFeatureEnabled('redirects.hitCount');
+
+        $this->view->assignMultiple([
+            'redirects' => $redirects,
+            'defaultUrl' => $defaultUrl,
+            'showHitCounter' => $showHitCounter,
+        ]);
+    }
+
+    /**
+     * @param string $templateName
+     */
+    protected function initializeView(string $templateName)
+    {
+        $this->view = GeneralUtility::makeInstance(StandaloneView::class);
+        $this->view->setTemplate($templateName);
+        $this->view->setTemplateRootPaths(['EXT:redirects/Resources/Private/Templates/Management']);
+        $this->view->setPartialRootPaths(['EXT:redirects/Resources/Private/Partials']);
+        $this->view->setLayoutRootPaths(['EXT:redirects/Resources/Private/Layouts']);
+    }
+
+    /**
+     * Create document header buttons
+     */
+    protected function getButtons()
+    {
+        /** @var UriBuilder $uriBuilder */
+        $uriBuilder = GeneralUtility::makeInstance(UriBuilder::class);
+
+        $buttonBar = $this->moduleTemplate->getDocHeaderComponent()->getButtonBar();
+
+        // Create new
+        $newRecordButton = $buttonBar->makeLinkButton()
+            ->setHref((string)$uriBuilder->buildUriFromRoute(
+                'record_edit',
+                [
+                    'edit' => ['sys_redirect' => ['new'],
+                ],
+                'returnUrl' => (string)BackendUtility::getModuleUrl('site_redirects'),
+            ]
+            ))
+            ->setTitle($this->getLanguageService()->getLL('redirect_add_text'))
+            ->setIcon($this->iconFactory->getIcon('actions-add', Icon::SIZE_SMALL));
+        $buttonBar->addButton($newRecordButton, ButtonBar::BUTTON_POSITION_LEFT, 10);
+
+        // Reload
+        $reloadButton = $buttonBar->makeLinkButton()
+            ->setHref(GeneralUtility::getIndpEnv('REQUEST_URI'))
+            ->setTitle($this->getLanguageService()->sL('LLL:EXT:lang/Resources/Private/Language/locallang_core.xlf:labels.reload'))
+            ->setIcon($this->iconFactory->getIcon('actions-refresh', Icon::SIZE_SMALL));
+        $buttonBar->addButton($reloadButton, ButtonBar::BUTTON_POSITION_RIGHT);
+
+        // Shortcut
+        $mayMakeShortcut = $this->getBackendUserAuthentication()->mayMakeShortcut();
+        if ($mayMakeShortcut) {
+            $getVars = ['id', 'route'];
+
+            $shortcutButton = $buttonBar->makeShortcutButton()
+                ->setModuleName('site_redirects')
+                ->setGetVariables($getVars);
+            $buttonBar->addButton($shortcutButton, ButtonBar::BUTTON_POSITION_RIGHT);
+        }
+    }
+
+    /**
+     * @return LanguageService
+     */
+    protected function getLanguageService(): LanguageService
+    {
+        return $GLOBALS['LANG'];
+    }
+
+    /**
+     * @return BackendUserAuthentication
+     */
+    protected function getBackendUserAuthentication(): BackendUserAuthentication
+    {
+        return $GLOBALS['BE_USER'];
+    }
+}
Index: typo3/sysext/redirects/Classes/Evaluation/SourceHost.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/Evaluation/SourceHost.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/Evaluation/SourceHost.php	(date 1515879118000)
@@ -0,0 +1,103 @@
+<?php
+declare(strict_types = 1);
+
+namespace TYPO3\CMS\Redirects\Evaluation;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+/**
+ * Class SourceHost
+ * Triggered from DataHandler as TCA formevals hook for validation / sanitation of domain values.
+ */
+class SourceHost
+{
+    /**
+     * JavaScript code for client side validation/evaluation
+     *
+     * @return string JavaScript code for client side validation/evaluation
+     */
+    public function returnFieldJS(): string
+    {
+        $jsCode = [];
+        $jsCode[] = 'if (value === \'*\') {return value;}';
+        $jsCode[] = 'var parser = document.createElement(\'a\');';
+        $jsCode[] = 'parser.href = value.indexOf(\'://\') != -1 ? value : \'http://\' + value;';
+        $jsCode[] = 'return parser.host;';
+        return implode(' ', $jsCode);
+    }
+
+    /**
+     * Server-side removing of protocol on save
+     *
+     * @param string $value The field value to be evaluated
+     * @return string Evaluated field value
+     */
+    public function evaluateFieldValue(string $value): string
+    {
+        // 1) Special case: * means any domain
+        if ($value === '*') {
+            return $value;
+        }
+
+        // 2) Check if value contains a protocol like http:// https:// etc...
+        if (strpos($value, '://') !== false) {
+            $tmp = $this->parseUrl($value);
+            if (!empty($tmp)) {
+                return $tmp;
+            }
+        }
+
+        // 3) Check domain name
+        // remove anything after the first "/"
+        $checkValue = $value;
+        if (strpos($value, '/') !== false) {
+            $checkValue = substr($value, 0, strpos($value, '/'));
+        }
+        $validHostnameRegex = '/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/';
+        if (preg_match_all($validHostnameRegex, $checkValue, $matches, PREG_SET_ORDER) !== false) {
+            if (!empty($matches)) {
+                return $checkValue;
+            }
+        }
+
+        // 4) IPv4 or IPv6
+        $isIP = filter_var($value, FILTER_VALIDATE_IP) === $value;
+        if ($isIP) {
+            return $value;
+        }
+
+        return '';
+    }
+
+    /**
+     * @param string $value
+     * @return string
+     */
+    protected function parseUrl(string $value): string
+    {
+        $urlParts = parse_url($value);
+        if (!empty($urlParts['host'])) {
+            $value = $urlParts['host'];
+
+            // Special case IPv6 with protocol: http://[2001:0db8:85a3:08d3::0370:7344]/
+            // $urlParts['host'] will be [2001:0db8:85a3:08d3::0370:7344]
+            $ipv6Pattern = '/\[([a-zA-Z0-9:]*)\]/';
+            preg_match_all($ipv6Pattern, $urlParts['host'], $ipv6Matches, PREG_SET_ORDER);
+            if (!empty($ipv6Matches[0][1])) {
+                $value = $ipv6Matches[0][1];
+            }
+        }
+        return $value;
+    }
+}
Index: typo3/sysext/redirects/Classes/FormDataProvider/ValuePickerItemDataProvider.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/FormDataProvider/ValuePickerItemDataProvider.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/FormDataProvider/ValuePickerItemDataProvider.php	(date 1515879118000)
@@ -0,0 +1,66 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\FormDataProvider;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Backend\Form\FormDataProviderInterface;
+use TYPO3\CMS\Core\Database\ConnectionPool;
+use TYPO3\CMS\Core\Database\Query\Restriction\HiddenRestriction;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+
+/**
+ * Inject sys_domain records into valuepicker form
+ */
+class ValuePickerItemDataProvider implements FormDataProviderInterface
+{
+
+    /**
+     * Add sys_domains into $result data array
+     *
+     * @param array $result Initialized result array
+     * @return array Result filled with more data
+     */
+    public function addData(array $result): array
+    {
+        if ($result['tableName'] === 'sys_redirect' && isset($result['processedTca']['columns']['source_host'])) {
+            $domains = $this->getDomains();
+            foreach ($domains as $domain) {
+                $result['processedTca']['columns']['source_host']['config']['valuePicker']['items'][] =
+                [
+                    $domain['domainName'],
+                    $domain['domainName'],
+                ];
+            }
+        }
+        return $result;
+    }
+
+    /**
+     * Get sys_domain records from database
+     *
+     * @return array domain records
+     */
+    public function getDomains(): array
+    {
+        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('sys_domain');
+        $queryBuilder->getRestrictions()->add(GeneralUtility::makeInstance(HiddenRestriction::class));
+        $domains = $queryBuilder
+            ->select('domainName')
+            ->from('sys_domain')
+            ->execute()
+            ->fetchAll();
+        return $domains;
+    }
+}
Index: typo3/sysext/redirects/Classes/Hooks/DataHandlerCacheFlushingHook.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/Hooks/DataHandlerCacheFlushingHook.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/Hooks/DataHandlerCacheFlushingHook.php	(date 1515879118000)
@@ -0,0 +1,39 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\Hooks;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Core\DataHandling\DataHandler;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3\CMS\Redirects\Service\RedirectCacheService;
+
+/**
+ * Ensure to clear the cache entry when a sys_redirect record is modified or deleted
+ */
+class DataHandlerCacheFlushingHook
+{
+    /**
+     * Check if the data handler processed a sys_redirect record, if so, rebuild the redirect index cache
+     *
+     * @param array $parameters unused
+     * @param DataHandler $dataHandler the data handler object
+     */
+    public function rebuildRedirectCacheIfNecessary(array $parameters, DataHandler $dataHandler)
+    {
+        if (isset($dataHandler->datamap['sys_redirect']) || isset($dataHandler->cmdmap['sys_redirect'])) {
+            GeneralUtility::makeInstance(RedirectCacheService::class)->rebuild();
+        }
+    }
+}
Index: typo3/sysext/redirects/Classes/Http/RedirectHandler.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/Http/RedirectHandler.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/Http/RedirectHandler.php	(date 1515879118000)
@@ -0,0 +1,105 @@
+<?php
+declare(strict_types=1);
+namespace TYPO3\CMS\Redirects\Http;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use Psr\Http\Message\ResponseInterface;
+use Psr\Http\Message\UriInterface;
+use Psr\Log\LoggerAwareInterface;
+use Psr\Log\LoggerAwareTrait;
+use TYPO3\CMS\Core\Configuration\Features;
+use TYPO3\CMS\Core\Database\ConnectionPool;
+use TYPO3\CMS\Core\Http\Response;
+use TYPO3\CMS\Core\Http\ServerRequestFactory;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3\CMS\Core\Utility\HttpUtility;
+use TYPO3\CMS\Redirects\Service\RedirectService;
+
+/**
+ * Hooks into the frontend request, and checks if a redirect should apply,
+ * If so, a redirect response is triggered.
+ */
+class RedirectHandler implements LoggerAwareInterface
+{
+    use LoggerAwareTrait;
+
+    /**
+     * First hook within the Frontend Request handling
+     */
+    public function handle()
+    {
+        $redirectService = GeneralUtility::makeInstance(RedirectService::class);
+        //@todo The request object should be handed in by the hook in the future
+        $currentRequest = ServerRequestFactory::fromGlobals();
+        $port = $currentRequest->getUri()->getPort();
+        $matchedRedirect = $redirectService->matchRedirect(
+            $currentRequest->getUri()->getHost() . ($port ? ':' . $port : ''),
+            $currentRequest->getUri()->getPath()
+        );
+
+        // If the matched redirect is found, resolve it, and check further
+        if (!is_array($matchedRedirect)) {
+            return;
+        }
+
+        $url = $redirectService->getTargetUrl($matchedRedirect, $currentRequest->getQueryParams());
+        if ($url instanceof UriInterface) {
+            $this->logger->debug('Redirecting', ['record' => $matchedRedirect, 'uri' => $url]);
+            $response = $this->buildRedirectResponse($url, $matchedRedirect);
+            $this->incrementHitCount($matchedRedirect);
+            HttpUtility::sendResponse($response);
+        }
+    }
+
+    /**
+     * Creates a PSR-7 compatible Response object
+     *
+     * @param UriInterface $uri
+     * @param array $redirectRecord
+     * @return ResponseInterface
+     */
+    protected function buildRedirectResponse(UriInterface $uri, array $redirectRecord): ResponseInterface
+    {
+        $headers = [
+            'location' => [(string)$uri],
+            'X-Redirect-By' => 'TYPO3'
+        ];
+
+        return new Response('php://temp', (int)$redirectRecord['target_statuscode'], $headers);
+    }
+
+    /**
+     * Updates the sys_record's hit counter by one
+     *
+     * @param array $redirectRecord
+     */
+    protected function incrementHitCount(array $redirectRecord)
+    {
+        // Track the hit if not disabled
+        if (!GeneralUtility::makeInstance(Features::class)->isFeatureEnabled('redirects.hitCount') || $redirectRecord['disable_hitcount']) {
+            return;
+        }
+        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
+            ->getQueryBuilderForTable('sys_redirect');
+        $queryBuilder
+            ->update('sys_redirect')
+            ->where(
+                $queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($redirectRecord['uid'], \PDO::PARAM_INT))
+            )
+            ->set('hitcount', $queryBuilder->quoteIdentifier('hitcount') . '+1', false)
+            ->set('lasthiton', $GLOBALS['EXEC_TIME'])
+            ->execute();
+    }
+}
Index: typo3/sysext/redirects/Classes/Service/RedirectCacheService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/Service/RedirectCacheService.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/Service/RedirectCacheService.php	(date 1515879118000)
@@ -0,0 +1,126 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\Service;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Core\Cache\CacheManager;
+use TYPO3\CMS\Core\Database\ConnectionPool;
+use TYPO3\CMS\Core\Database\Query\Restriction\DeletedRestriction;
+use TYPO3\CMS\Core\Database\Query\Restriction\HiddenRestriction;
+use TYPO3\CMS\Core\Utility\ExtensionManagementUtility;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+
+/**
+ * Ensure to clear the cache entry when a sys_redirect record is modified, also the main pool
+ * for getting all redirects.
+ *
+ * @internal
+ */
+class RedirectCacheService
+{
+    /**
+     * @var \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
+     */
+    protected $cache;
+
+    /**
+     * Constructor setting up the cache
+     * @param CacheManager|null $cacheManager
+     * @throws \TYPO3\CMS\Core\Cache\Exception\NoSuchCacheException
+     */
+    public function __construct(CacheManager $cacheManager = null)
+    {
+        $cacheManager = $cacheManager ?? GeneralUtility::makeInstance(CacheManager::class);
+        $this->cache = $cacheManager->getCache('cache_pages');
+    }
+
+    /**
+     * Fetches all redirects available to the system, grouped by domain and regexp/nonregexp
+     *
+     * @return array
+     */
+    public function getRedirects(): array
+    {
+        $redirects = $this->cache->get('redirects');
+        if (!is_array($redirects)) {
+            $redirects = $this->rebuild();
+        }
+        return $redirects;
+    }
+
+    /**
+     * Rebuilds the cache for all redirects, grouped by host and by regular expressions.
+     * Does not include deleted redirects, but includes the ones with dynamic starttime/endtime.
+     */
+    public function rebuild(): array
+    {
+        $redirects = [];
+        $this->flush();
+        if (!is_array($GLOBALS['TCA']) || !isset($GLOBALS['TCA']['sys_redirect'])) {
+            ExtensionManagementUtility::loadBaseTca();
+        }
+        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('sys_redirect');
+        $queryBuilder->getRestrictions()->removeAll()
+            ->add(GeneralUtility::makeInstance(HiddenRestriction::class))
+            ->add(GeneralUtility::makeInstance(DeletedRestriction::class));
+        $statement = $queryBuilder
+            ->select('*')
+            ->from('sys_redirect')
+            ->execute();
+        while ($row = $statement->fetch()) {
+            $host = $row['source_host'] ?: '*';
+            if ($row['is_regexp']) {
+                $redirects[$host]['regexp'][$row['source_path']][$row['uid']] = $row;
+            } else {
+                $redirects[$host]['flat'][rtrim($row['source_path'], '/') . '/'][$row['uid']] = $row;
+            }
+        }
+        $this->cache->set('redirects', $redirects, ['redirects']);
+        return $redirects;
+    }
+
+    /**
+     * Used within the backend module, which also includes the hidden records
+     * @return array
+     */
+    public function getAllRedirects(): array
+    {
+        $redirects = [];
+        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('sys_redirect');
+        $queryBuilder->getRestrictions()->removeAll()
+            ->add(GeneralUtility::makeInstance(DeletedRestriction::class));
+        $statement = $queryBuilder
+            ->select('*')
+            ->from('sys_redirect')
+            ->execute();
+        while ($row = $statement->fetch()) {
+            $host = $row['source_host'] ?: '*';
+            if ($row['is_regexp']) {
+                $redirects[$host]['regexp'][$row['source_path']][$row['uid']] = $row;
+            } else {
+                $redirects[$host]['flat'][rtrim($row['source_path'], '/') . '/'][$row['uid']] = $row;
+            }
+        }
+        return $redirects;
+    }
+
+    /**
+     * Flushes all redirects from the cache
+     */
+    protected function flush()
+    {
+        $this->cache->flushByTag('redirects');
+    }
+}
Index: typo3/sysext/redirects/Classes/Service/RedirectService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/Service/RedirectService.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/Service/RedirectService.php	(date 1515879118000)
@@ -0,0 +1,266 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\Service;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use Psr\Http\Message\UriInterface;
+use Psr\Log\LoggerAwareInterface;
+use Psr\Log\LoggerAwareTrait;
+use TYPO3\CMS\Core\Http\Uri;
+use TYPO3\CMS\Core\LinkHandling\LinkService;
+use TYPO3\CMS\Core\Resource\Exception\InvalidPathException;
+use TYPO3\CMS\Core\Resource\File;
+use TYPO3\CMS\Core\Resource\Folder;
+use TYPO3\CMS\Core\Utility\ExtensionManagementUtility;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3\CMS\Frontend\Controller\TypoScriptFrontendController;
+use TYPO3\CMS\Frontend\Typolink\AbstractTypolinkBuilder;
+use TYPO3\CMS\Frontend\Typolink\UnableToLinkException;
+
+/**
+ * Creates a proper URL to redirect from a matched redirect of a request
+ *
+ * @internal due to some possible refactorings in TYPO3 v9
+ */
+class RedirectService implements LoggerAwareInterface
+{
+    use LoggerAwareTrait;
+
+    /**
+     * Checks against all available redirects "flat" or "regexp", and against starttime/endtime
+     *
+     * @param string $domain
+     * @param string $path
+     * @return array|null
+     */
+    public function matchRedirect(string $domain, string $path)
+    {
+        $allRedirects = $this->fetchRedirects();
+        // Check if the domain matches, or if there is a
+        // redirect fitting for any domain
+        foreach ([$domain, '*'] as $domainName) {
+            if (empty($allRedirects[$domainName])) {
+                continue;
+            }
+
+            $possibleRedirects = [];
+            // match if a flat redirect matches
+            if (!empty($allRedirects[$domainName]['flat'][rtrim($path, '/') . '/'])) {
+                $possibleRedirects = $allRedirects[$domainName]['flat'][rtrim($path, '/') . '/'];
+            }
+            // check all redirects that are registered as regex
+            if (!empty($allRedirects[$domainName]['regexp'])) {
+                $allRegexps = array_keys($allRedirects[$domainName]['regexp']);
+                foreach ($allRegexps as $regexp) {
+                    if (preg_match($regexp, $path)) {
+                        $possibleRedirects += $allRedirects[$domainName]['regexp'][$regexp];
+                    }
+                }
+            }
+
+            foreach ($possibleRedirects as $possibleRedirect) {
+                // check starttime and endtime for all existing records
+                if ($this->isRedirectActive($possibleRedirect)) {
+                    return $possibleRedirect;
+                }
+            }
+        }
+    }
+
+    /**
+     * Check if a redirect record matches the starttime and endtime and disable restrictions
+     *
+     * @param array $redirectRecord
+     *
+     * @return bool whether the redirect is active and should be used for redirecting the current request
+     */
+    protected function isRedirectActive(array $redirectRecord): bool
+    {
+        return !$redirectRecord['disabled'] && $redirectRecord['starttime'] <= $GLOBALS['SIM_ACCESS_TIME'] &&
+               (!$redirectRecord['endtime'] || $redirectRecord['endtime'] >= $GLOBALS['SIM_ACCESS_TIME']);
+    }
+
+    /**
+     * Fetches all redirects from the DB and caches them, grouped by the domain
+     * does NOT take starttime/endtime into account, as it is cached.
+     *
+     * @return array
+     */
+    protected function fetchRedirects(): array
+    {
+        return GeneralUtility::makeInstance(RedirectCacheService::class)->getRedirects();
+    }
+
+    /**
+     * Check if the current request is actually a redirect, and then process the redirect.
+     *
+     * @param string $redirectTarget
+     *
+     * @return array the link details from the linkService
+     */
+    protected function resolveLinkDetailsFromLinkTarget(string $redirectTarget): array
+    {
+        // build the target URL, take force SSL into account etc.
+        $linkService = GeneralUtility::makeInstance(LinkService::class);
+        try {
+            $linkDetails = $linkService->resolve($redirectTarget);
+            switch ($linkDetails['type']) {
+                case LinkService::TYPE_URL:
+                    // all set up, nothing to do
+                    break;
+                case LinkService::TYPE_FILE:
+                    /** @var File $file */
+                    $file = $linkDetails['file'];
+                    if ($file instanceof File) {
+                        $linkDetails['url'] = $file->getPublicUrl();
+                    }
+                    break;
+                case LinkService::TYPE_FOLDER:
+                    /** @var Folder $folder */
+                    $folder = $linkDetails['folder'];
+                    if ($folder instanceof Folder) {
+                        $linkDetails['url'] = $folder->getPublicUrl();
+                    }
+                    break;
+                default:
+                    // we have to return the link details without having a "URL" parameter
+
+            }
+        } catch (InvalidPathException $e) {
+            return [];
+        }
+        return $linkDetails;
+    }
+
+    /**
+     * @param array $matchedRedirect
+     * @param array $queryParams
+     * @return UriInterface|Uri|null
+     */
+    public function getTargetUrl(array $matchedRedirect, array $queryParams)
+    {
+        $this->logger->debug('Found a redirect to process', $matchedRedirect);
+        $linkDetails = $this->resolveLinkDetailsFromLinkTarget((string)$matchedRedirect['target']);
+        $this->logger->debug('Resolved link details for redirect', $linkDetails);
+        // Do this for files, folders, external URLs
+        if ($linkDetails['url']) {
+            $url = new Uri($linkDetails['url']);
+            if ($matchedRedirect['force_https']) {
+                $url = $url->withScheme('https');
+            }
+            if ($matchedRedirect['keep_query_parameters']) {
+                $url = $this->addQueryParams($queryParams, $url);
+            }
+        } else {
+            // If it's a record or page, then boot up TSFE
+            $url = $this->getUriFromCustomLinkDetails($linkDetails, $matchedRedirect);
+        }
+        return $url;
+    }
+
+    /**
+     * Adds query parameters to a Uri object
+     *
+     * @param array $queryParams
+     * @param Uri $url
+     * @return Uri
+     */
+    protected function addQueryParams(array $queryParams, Uri $url): Uri
+    {
+        // New query parameters overrule the ones that should be kept
+        $newQueryParamString = $url->getQuery();
+        if (!empty($newQueryParamString)) {
+            $newQueryParams = GeneralUtility::explodeUrl2Array($newQueryParamString, true);
+            $queryParams = array_replace_recursive($queryParams, $newQueryParams);
+        }
+        $query = http_build_query($queryParams, '', '&', PHP_QUERY_RFC3986);
+        if ($query) {
+            $url = $url->withQuery($query);
+        }
+        return $url;
+    }
+
+    /**
+     * Called when TypoScript/TSFE is available, so typolink is used to generate the URL
+     *
+     * @param array $linkDetails
+     * @param array $redirectRecord
+     * @return UriInterface|null
+     */
+    protected function getUriFromCustomLinkDetails(array $linkDetails, array $redirectRecord)
+    {
+        if (!isset($linkDetails['type'], $GLOBALS['TYPO3_CONF_VARS']['FE']['typolinkBuilder'][$linkDetails['type']])) {
+            return null;
+        }
+        $this->bootFrontendController();
+        /** @var AbstractTypolinkBuilder $linkBuilder */
+        $linkBuilder = GeneralUtility::makeInstance(
+            $GLOBALS['TYPO3_CONF_VARS']['FE']['typolinkBuilder'][$linkDetails['type']],
+            $GLOBALS['TSFE']->cObj
+        );
+        try {
+            $configuration = [
+                'forceAbsoluteUrl' => true,
+            ];
+            if ($redirectRecord['force_https']) {
+                $configuration['forceAbsoluteUrl.']['scheme'] = 'https';
+            }
+            if ($redirectRecord['keep_query_parameters']) {
+                $configuration['useCacheHash'] = false;
+                $configuration['addQueryString'] = true;
+            }
+            list($url) = $linkBuilder->build($linkDetails, '', '', $configuration);
+            return new Uri($url);
+        } catch (UnableToLinkException $e) {
+            // Link was build by DatabaseRecordLinkBuilder
+            if (!empty($GLOBALS['TSFE']->cObj->lastTypoLinkUrl)) {
+                return new Uri($GLOBALS['TSFE']->cObj->lastTypoLinkUrl);
+            }
+        }
+    }
+
+    /**
+     * Instantiates a TSFE object, with the first valid page ID found, after that the following properties
+     * are available
+     * - TSFE->sys_page
+     * - TSFE->tmpl
+     * - TSFE->config
+     * - TSFE->cObj
+     *
+     * So a link to a page could be generated.
+     */
+    protected function bootFrontendController()
+    {
+        if (!is_array($GLOBALS['TCA']) || !isset($GLOBALS['TCA']['pages'])) {
+            ExtensionManagementUtility::loadBaseTca();
+        }
+        // disable page errors
+        $GLOBALS['TYPO3_CONF_VARS']['FE']['pageUnavailable_handling'] = false;
+        $GLOBALS['TSFE'] = GeneralUtility::makeInstance(
+            TypoScriptFrontendController::class,
+            null,
+            GeneralUtility::_GP('id'),
+            GeneralUtility::_GP('type')
+        );
+        $GLOBALS['TSFE']->initFEuser();
+        $GLOBALS['TSFE']->initializeBackendUser();
+        $GLOBALS['TSFE']->fetch_the_id();
+        $GLOBALS['TSFE']->initTemplate();
+        $GLOBALS['TSFE']->getConfigArray();
+        $GLOBALS['TSFE']->settingLanguage();
+        $GLOBALS['TSFE']->settingLocale();
+        $GLOBALS['TSFE']->newCObj();
+    }
+}
Index: typo3/sysext/redirects/Classes/Service/UrlService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/Service/UrlService.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/Service/UrlService.php	(date 1515879118000)
@@ -0,0 +1,40 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\Service;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Backend\Utility\BackendUtility;
+use TYPO3\CMS\Core\Database\ConnectionPool;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+
+/**
+ * Service for URL-related data
+ */
+class UrlService
+{
+    /**
+     * Retrieves the first valid URL
+     *
+     * @return string a URL like "http://example.org"
+     */
+    public function getDefaultUrl(): string
+    {
+        $connection = GeneralUtility::makeInstance(ConnectionPool::class)->getConnectionForTable('pages');
+        $firstPageInTree = $connection->select(['uid'], 'pages', ['pid' => 0], [], ['sorting' => 'ASC'], 1)->fetchColumn(0);
+        $url = BackendUtility::getViewDomain($firstPageInTree);
+
+        return $url;
+    }
+}
Index: typo3/sysext/redirects/Classes/UserFunctions/HitCountDisplayCondition.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/UserFunctions/HitCountDisplayCondition.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/UserFunctions/HitCountDisplayCondition.php	(date 1515879118000)
@@ -0,0 +1,36 @@
+<?php
+declare(strict_types=1);
+
+namespace TYPO3\CMS\Redirects\UserFunctions;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Core\Configuration\Features;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+
+/**
+ * Display condition evaluating the feature toggle "redirects.hitCount"
+ */
+class HitCountDisplayCondition
+{
+    /**
+     * Check whether the redirects hit count is globally enabled
+     *
+     * @return bool
+     */
+    public function isEnabled()
+    {
+        return GeneralUtility::makeInstance(Features::class)->isFeatureEnabled('redirects.hitCount');
+    }
+}
Index: typo3/sysext/redirects/Classes/ViewHelpers/EditRecordViewHelper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Classes/ViewHelpers/EditRecordViewHelper.php	(date 1515879118000)
+++ typo3/sysext/redirects/Classes/ViewHelpers/EditRecordViewHelper.php	(date 1515879118000)
@@ -0,0 +1,104 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\ViewHelpers;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Backend\Routing\UriBuilder;
+use TYPO3\CMS\Backend\Utility\BackendUtility;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3Fluid\Fluid\Core\Rendering\RenderingContextInterface;
+use TYPO3Fluid\Fluid\Core\ViewHelper\AbstractViewHelper;
+use TYPO3Fluid\Fluid\Core\ViewHelper\Traits\CompileWithRenderStatic;
+
+/**
+ * Edit Record ViewHelper
+ * @todo remove once general edit view helper exists
+ */
+class EditRecordViewHelper extends AbstractViewHelper
+{
+    use CompileWithRenderStatic;
+
+    /**
+     * Initializes the arguments
+     */
+    public function initializeArguments()
+    {
+        $this->registerArgument('command', 'string', 'New, Edit or Remove a Record.', true);
+        $this->registerArgument('uid', 'int', 'UID of the Record to edit.', true);
+    }
+
+    /**
+     * Render link
+     *
+     * @param array $arguments
+     * @param \Closure $renderChildrenClosure
+     * @param RenderingContextInterface $renderingContext
+     *
+     * @return string
+     * @throws \TYPO3\CMS\Backend\Routing\Exception\RouteNotFoundException
+     */
+    public static function renderStatic(array $arguments, \Closure $renderChildrenClosure, RenderingContextInterface $renderingContext): string
+    {
+        $uriBuilder = GeneralUtility::makeInstance(UriBuilder::class);
+
+        switch ($arguments['command']) {
+            case 'new':
+                $urlParameters = [
+                    'edit[sys_redirect][' . $arguments['uid'] . ']' => 'new',
+                    'returnUrl' => (string)BackendUtility::getModuleUrl('site_redirects'),
+                ];
+                $route = 'record_edit';
+                break;
+            case 'edit':
+                $urlParameters = [
+                    'edit[sys_redirect][' . $arguments['uid'] . ']' => 'edit',
+                    'returnUrl' => (string)BackendUtility::getModuleUrl('site_redirects'),
+                ];
+                $route = 'record_edit';
+                break;
+            case 'delete':
+                $urlParameters = [
+                    'cmd[sys_redirect][' . $arguments['uid'] . '][delete]' => 1,
+                    'redirect' => GeneralUtility::getIndpEnv('REQUEST_URI'),
+                ];
+                $route = 'tce_db';
+                break;
+            case 'unhide':
+                $urlParameters = [
+                    'data[sys_redirect][' . $arguments['uid'] . '][disabled]' => 0,
+                    'redirect' => GeneralUtility::getIndpEnv('REQUEST_URI'),
+                ];
+                $route = 'tce_db';
+                break;
+            case 'hide':
+                $urlParameters = [
+                    'data[sys_redirect][' . $arguments['uid'] . '][disabled]' => 1,
+                    'redirect' => GeneralUtility::getIndpEnv('REQUEST_URI'),
+                ];
+                $route= 'tce_db';
+                break;
+            case 'resetcounter':
+                $urlParameters = [
+                    'data[sys_redirect][' . $arguments['uid'] . '][hitcount]' => 0,
+                    'redirect' => GeneralUtility::getIndpEnv('REQUEST_URI'),
+                ];
+                $route = 'tce_db';
+                break;
+            default:
+                throw new \InvalidArgumentException('Invalid command given to EditRecordViewhelper.', 1516708789);
+        }
+        return (string)$uriBuilder->buildUriFromRoute($route, $urlParameters);
+    }
+}
Index: typo3/sysext/redirects/Configuration/TCA/sys_redirect.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Configuration/TCA/sys_redirect.php	(date 1515879118000)
+++ typo3/sysext/redirects/Configuration/TCA/sys_redirect.php	(date 1515879118000)
@@ -0,0 +1,220 @@
+<?php
+
+return [
+    'ctrl' => [
+        'title' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect',
+        'label' => 'source_host',
+        'label_alt' => 'source_path',
+        'label_alt_force' => true,
+        'crdate' => 'createdon',
+        'cruser_id' => 'createdby',
+        'tstamp' => 'updatedon',
+        'versioningWS' => false,
+        'default_sortby' => 'source_host, source_path',
+        'rootLevel' => 1,
+        'security' => [
+            'ignoreWebMountRestriction' => true,
+            'ignoreRootLevelRestriction' => true,
+        ],
+        'delete' => 'deleted',
+        'enablecolumns' => [
+            'disabled' => 'disabled',
+            'starttime' => 'starttime',
+            'endtime' => 'endtime',
+        ],
+        'typeicon_classes' => [
+            'default' => 'mimetypes-x-sys_redirect',
+        ],
+        'searchFields' => 'source_host,source_path,target,target_statuscode',
+    ],
+    'interface' => [
+        'showRecordFieldList' => 'disabled, source_host, source_path, is_regexp, force_https, keep_query_parameters, target, target_statuscode, hitcount, lasthiton, disable_hitcount',
+    ],
+    'types' => [
+        '1' => [
+            'showitem' => '
+                --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:general, --palette--;;source, --palette--;;targetdetails,
+                --div--;LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:tabs.redirectCount, disable_hitcount, hitcount, lasthiton,
+                --div--;LLL:EXT:core/Resources/Private/Language/Form/locallang_tabs.xlf:access, --palette--;;visibility'
+        ],
+    ],
+    'palettes' => [
+        'visibility' => [
+            'showitem' => 'disabled, --linebreak--, starttime, endtime'
+        ],
+        'source' => [
+            'showitem' => 'source_host, --linebreak--, source_path, is_regexp'
+        ],
+        'targetdetails' => [
+            'showitem' => 'target, target_statuscode, --linebreak--, force_https, keep_query_parameters'
+        ],
+    ],
+    'columns' => [
+        'disabled' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.disabled',
+            'config' => [
+                'type' => 'check',
+                'items' => [
+                    '1' => [
+                        '0' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.disabled.0'
+                    ]
+                ]
+            ]
+        ],
+        'starttime' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:lang/Resources/Private/Language/locallang_general.xlf:LGL.starttime',
+            'config' => [
+                'type' => 'input',
+                'renderType' => 'inputDateTime',
+                'eval' => 'datetime,int',
+                'default' => 0
+            ]
+        ],
+        'endtime' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:lang/Resources/Private/Language/locallang_general.xlf:LGL.endtime',
+            'config' => [
+                'type' => 'input',
+                'renderType' => 'inputDateTime',
+                'eval' => 'datetime,int',
+                'default' => 0,
+                'range' => [
+                    'upper' => mktime(0, 0, 0, 1, 1, 2038)
+                ]
+            ]
+        ],
+        'source_host' => [
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.source_host',
+            'config' => [
+                'type' => 'input',
+                'eval' => 'trim,required,' . \TYPO3\CMS\Redirects\Evaluation\SourceHost::class,
+                // items will be extended by local sys_domain records using dataprovider TYPO3\CMS\Redirects\FormDataProvider\ValuePickerItemDataProvider
+                'valuePicker' => [
+                    'items' => [
+                        [   'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:source_host_global_text',
+                            '*',
+                        ],
+                    ],
+                ],
+                'default' => '*',
+            ],
+        ],
+        'source_path' => [
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.source_path',
+            'config' => [
+                'type' => 'input',
+                'size' => 30,
+                'eval' => 'trim,required',
+                'placeholder' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:source_path.placeholder',
+            ],
+        ],
+        'force_https' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.force_https',
+            'config' => [
+                'type' => 'check',
+                'default' => 0,
+                'items' => [
+                    '1' => [
+                        '0' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.force_https.0'
+                    ]
+                ]
+            ],
+        ],
+        'keep_query_parameters' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.keep_query_parameters',
+            'config' => [
+                'type' => 'check',
+                'default' => 0,
+                'items' => [
+                    '1' => [
+                        '0' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.keep_query_parameters.0'
+                    ]
+                ]
+            ],
+        ],
+        'target' => [
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.target',
+            'config' => [
+                'type' => 'input',
+                'eval' =>'required',
+                'renderType' => 'inputLink',
+                'softref' => 'typolink',
+                'fieldControl' => [
+                    'linkPopup' => [
+                        'options' => [
+                            'blindLinkOptions' => 'mail',
+                            'blindLinkFields' => 'class, target'
+                        ],
+                    ],
+                ],
+            ],
+        ],
+        'target_statuscode' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.target_statuscode',
+            'config' => [
+                'type' => 'select',
+                'renderType' => 'selectSingle',
+                'items' => [
+                    ['LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.target_statuscode.301', 301],
+                    ['LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.target_statuscode.302', 302],
+                    ['LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.target_statuscode.303', 303],
+                    ['LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.target_statuscode.307', 307],
+                ],
+                'default' => 307,
+                'size' => 1,
+            ],
+        ],
+        'hitcount' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.hitcount',
+            'config' => [
+                'type' => 'input',
+                'size' => 5,
+                'default' => 0,
+                'readOnly' => true
+            ],
+            'displayCond' => 'USER:TYPO3\CMS\Redirects\UserFunctions\HitCountDisplayCondition->isEnabled'
+        ],
+        'lasthiton' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.lasthiton',
+            'config' => [
+                'type' => 'input',
+                'eval' => 'datetime,int',
+                'renderType' => 'inputDateTime',
+                'readOnly' => true
+            ],
+            'displayCond' => 'USER:TYPO3\CMS\Redirects\UserFunctions\HitCountDisplayCondition->isEnabled'
+        ],
+        'disable_hitcount' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.disable_hitcount',
+            'config' => [
+                'type' => 'check',
+                'items' => [
+                    '1' => [
+                        '0' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.disable_hitcount.0'
+                    ]
+                ]
+            ],
+            'displayCond' => 'USER:TYPO3\CMS\Redirects\UserFunctions\HitCountDisplayCondition->isEnabled'
+        ],
+        'is_regexp' => [
+            'exclude' => true,
+            'label' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.is_regexp',
+            'config' => [
+                'type' => 'check',
+                'items' => [
+                    '1' => [
+                        '0' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_db.xlf:sys_redirect.is_regexp.0'
+                    ]
+                ]
+            ],
+        ],
+    ],
+];
Index: typo3/sysext/redirects/LICENSE.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/LICENSE.txt	(date 1515879118000)
+++ typo3/sysext/redirects/LICENSE.txt	(date 1515879118000)
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    {description}
+    Copyright (C) {year}  {fullname}
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  {signature of Ty Coon}, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
Index: typo3/sysext/redirects/Resources/Private/Language/locallang_db.xlf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Resources/Private/Language/locallang_db.xlf	(date 1515879118000)
+++ typo3/sysext/redirects/Resources/Private/Language/locallang_db.xlf	(date 1515879118000)
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xliff version="1.0" xmlns:t3="http://typo3.org/schemas/xliff">
+	<file t3:id="1515791927" source-language="en" datatype="plaintext" original="messages" date="2017-12-29T20:22:14Z" product-name="redirects">
+		<header/>
+		<body>
+			<trans-unit id="sys_redirect">
+				<source>Redirect</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.source_host">
+				<source>Source Domain</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.source_path">
+				<source>Source Path</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.force_https">
+				<source>SSL Redirect</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.force_https.0">
+				<source>Force SSL Redirect</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.keep_query_parameters">
+				<source>GET Parameters</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.keep_query_parameters.0">
+				<source>Keep GET Parameters</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.target">
+				<source>Target</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.target_statuscode">
+				<source>Status Code HTTP Header</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.target_statuscode.301">
+				<source>301 Moved Permanently</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.target_statuscode.302">
+				<source>302 Found</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.target_statuscode.303">
+				<source>303 See Other</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.target_statuscode.307">
+				<source>307 Temporary Redirect</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.hitcount">
+				<source>Count</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.lasthiton">
+				<source>Last Hit On</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.disable_hitcount">
+				<source>Disable Hit Counter</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.disable_hitcount.0">
+				<source>Disable</source>
+			</trans-unit>
+			<trans-unit id="tabs.redirectCount">
+				<source>Statistics</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.is_regexp">
+				<source>Is regular expression?</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.is_regexp.0">
+				<source>Yes</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.disabled">
+				<source>Disable</source>
+			</trans-unit>
+			<trans-unit id="sys_redirect.disabled.0">
+				<source>Deactivate redirect</source>
+			</trans-unit>
+		</body>
+	</file>
+</xliff>
Index: typo3/sysext/redirects/Resources/Private/Language/locallang_module_redirect.xlf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Resources/Private/Language/locallang_module_redirect.xlf	(date 1515879118000)
+++ typo3/sysext/redirects/Resources/Private/Language/locallang_module_redirect.xlf	(date 1515879118000)
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xliff version="1.0" xmlns:t3="http://typo3.org/schemas/xliff">
+	<file t3:id="1515791952" source-language="en" datatype="plaintext" original="messages" date="2017-12-29T20:23:34Z" product-name="redirects">
+		<header/>
+		<body>
+			<trans-unit id="mlang_labels_tablabel">
+				<source>Redirect Administration</source>
+			</trans-unit>
+			<trans-unit id="mlang_labels_tabdescr">
+				<source>This is the administration area for Web Redirects.</source>
+			</trans-unit>
+			<trans-unit id="mlang_tabs_tab">
+				<source>Redirects</source>
+			</trans-unit>
+
+			<trans-unit id="source_host_global_text">
+				<source>Global redirect (any domain)</source>
+			</trans-unit>
+
+			<trans-unit id="heading_text">
+				<source>Redirect Management</source>
+			</trans-unit>
+			<trans-unit id="redirect_add_text">
+				<source>Add redirect</source>
+			</trans-unit>
+			<trans-unit id="redirect_not_found.title">
+				<source>No redirects found!</source>
+			</trans-unit>
+			<trans-unit id="redirect_not_found.message">
+				<source>There are currently no redirect records found in the database.</source>
+			</trans-unit>
+			<trans-unit id="redirect_create">
+				<source>Create new redirect</source>
+			</trans-unit>
+
+			<trans-unit id="record_disabled">
+				<source>Redirect is not activated!</source>
+			</trans-unit>
+			<trans-unit id="source_host">
+				<source>Source Host</source>
+			</trans-unit>
+			<trans-unit id="source_path">
+				<source>Source Path</source>
+			</trans-unit>
+			<trans-unit id="source_path.placeholder">
+				<source>/my-path/</source>
+			</trans-unit>
+			<trans-unit id="destination">
+				<source>Destination</source>
+			</trans-unit>
+			<trans-unit id="destination_status_code">
+				<source>Status Code</source>
+			</trans-unit>
+			<trans-unit id="hits">
+				<source>Hits</source>
+			</trans-unit>
+			<trans-unit id="hit_text">
+				<source>%s hit</source>
+			</trans-unit>
+			<trans-unit id="hits_text">
+				<source>%s hits</source>
+			</trans-unit>
+			<trans-unit id="hit_reset">
+				<source>Reset Hit Counter (!)</source>
+			</trans-unit>
+			<trans-unit id="hit_reset.confirm.title">
+				<source>Reset the hitcounter of this record?</source>
+			</trans-unit>
+			<trans-unit id="hit_reset.confirm.content">
+				<source>Are you sure you want to reset the hitcounter of this record?</source>
+			</trans-unit>
+			<trans-unit id="hit_last">
+				<source>Last Hit on</source>
+			</trans-unit>
+			<trans-unit id="hit_last_never">
+				<source>Never</source>
+			</trans-unit>
+		</body>
+	</file>
+</xliff>
Index: typo3/sysext/redirects/Resources/Private/Layouts/RedirectAdministration.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Resources/Private/Layouts/RedirectAdministration.html	(date 1515879118000)
+++ typo3/sysext/redirects/Resources/Private/Layouts/RedirectAdministration.html	(date 1515879118000)
@@ -0,0 +1,2 @@
+<f:render section="headline" />
+<f:render section="content" />
Index: typo3/sysext/redirects/Resources/Private/Templates/Management/Overview.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Resources/Private/Templates/Management/Overview.html	(date 1515879118000)
+++ typo3/sysext/redirects/Resources/Private/Templates/Management/Overview.html	(date 1515879118000)
@@ -0,0 +1,126 @@
+<html xmlns:f="http://typo3.org/ns/TYPO3/CMS/Fluid/ViewHelpers" xmlns:rd="http://typo3.org/ns/TYPO3/CMS/Redirects/ViewHelpers" data-namespace-typo3-fluid="true">
+<f:layout name="RedirectAdministration" />
+
+<f:section name="headline">
+	<h1><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:heading_text"/></h1>
+</f:section>
+
+<f:section name="content">
+	<f:if condition="{redirects -> f:count()}">
+		<f:then><f:render section="table" arguments="{_all}" /></f:then>
+		<f:else>
+			<f:be.infobox state="-1" title="{f:translate(key: 'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:redirect_not_found.title')}">
+				<p><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:redirect_not_found.message"/></p>
+				<a class="btn btn-primary" href="{rd:editRecord(command: 'new', uid: 0)}"><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:redirect_create"/></a>
+			</f:be.infobox>
+		</f:else>
+	</f:if>
+</f:section>
+
+<f:section name="table">
+	<div class="table-fit">
+		<table class="table table-striped table-hover">
+			<thead>
+				<tr>
+					<th><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:source_host"/></th>
+					<th><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:source_path"/></th>
+					<th><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:destination"/></th>
+					<f:if condition="{showHitCounter}">
+						<th># <f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:hits"/></th>
+						<th><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:hit_last"/></th>
+					</f:if>
+					<th></th>
+				</tr>
+			</thead>
+			<tbody>
+				<f:for each="{redirects}" key="domainName" as="redirectsPerDomain">
+					<f:for each="{redirectsPerDomain}" as="groupedRedirects">
+						<f:for each="{groupedRedirects}" as="redirectRecords">
+							<f:for each="{redirectRecords}" as="redirect">
+								<tr>
+									<td>{redirect.source_host}</td>
+									<td>
+										<f:alias map="{
+											disable: '{f:translate(key: \'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:record_disabled\')}',
+											onlystart: '{f:translate(key: \'LLL:EXT:lang/Resources/Private/Language/locallang_common.xlf:start\')}: {f:format.date(date: redirect.starttime, format: \'d.m.Y H:i:s\')}',
+											onlyend: '{f:translate(key: \'LLL:EXT:lang/Resources/Private/Language/locallang_common.xlf:stop\')}: {f:format.date(date: redirect.endtime, format: \'d.m.Y H:i:s\')}',
+											startend: '{f:translate(key: \'LLL:EXT:lang/Resources/Private/Language/locallang_common.xlf:start\')}: {f:format.date(date: redirect.starttime, format: \'d.m.Y H:i:s\')} - {f:translate(key: \'LLL:EXT:lang/Resources/Private/Language/locallang_common.xlf:stop\')}: {f:format.date(date: redirect.endtime, format: \'d.m.Y H:i:s\')}'
+										}">
+										<f:if condition="{redirect.disabled}"><f:then><span title="{disable}"></f:then>
+										<f:else if="{redirect.starttime} && !{redirect.endtime}"><span title="{onlystart}"></f:else>
+										<f:else if="!{redirect.starttime} && {redirect.endtime}"><span title="{onlyend}"></f:else>
+										<f:else if="{redirect.starttime} && {redirect.endtime}"><span title="{startend}"></f:else>
+										<f:else><span></f:else>
+										</f:if>
+										<core:iconForRecord table="sys_redirect" row="{redirect}" /></span>
+										</f:alias>
+										<a href="{rd:editRecord(command: 'edit', uid: redirect.uid)}" title="{f:translate(key: 'LLL:EXT:lang/Resources/Private/Language/locallang_mod_web_list.xlf:edit')}">{redirect.source_path}</a>
+									</td>
+									<td><f:link.typolink parameter="{redirect.target}" target="_blank"><f:uri.typolink parameter="{redirect.target}"></f:uri.typolink></f:link.typolink> (<f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:destination_status_code"/>: {redirect.target_statuscode})</td>
+									<f:if condition="{showHitCounter}">
+										<td>
+											<f:if condition="!{redirect.disable_hitcount}">
+													<f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:hit{f:if(condition:'{redirect.hitcount} > 1',then:'s')}_text" arguments="{0:redirect.hitcount}"/>
+													<f:if condition="{redirect.hitcount} != 0">
+													<a class="t3js-modal-trigger"
+													   href="{rd:editRecord(command: 'resetcounter', uid: redirect.uid)}"
+													   title="{f:translate(key: 'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:hit_reset')}"
+													   data-title="{f:translate(key: 'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:hit_reset.confirm.title')}"
+													   data-content="{f:translate(key: 'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:hit_reset.confirm.content')}"
+													   data-button-close-text="{f:translate(key: 'LLL:EXT:lang/Resources/Private/Language/locallang_alt_doc.xlf:buttons.confirm.delete_record.no')}">
+													<core:icon identifier="actions-edit-restore" /></a>
+												</f:if>
+											</f:if>
+										<td>
+											<f:if condition="{redirect.lasthiton}">
+												<f:then><f:format.date format="d.m.Y H:i:s">@{redirect.lasthiton}</f:format.date></f:then>
+												<f:else><f:translate key="LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf:hit_last_never"/></f:else>
+											</f:if>
+										</td>
+									</f:if>
+									<td>
+										<div class="btn-group">
+											<f:if condition="{redirect.is_regexp}">
+												<f:then>
+													<span class="btn btn-default disabled"><core:icon identifier="empty-empty" /></span>
+												</f:then>
+												<f:else>
+													<f:link.external class="btn btn-default" uri="{f:if(condition: '{redirect.source_host} == \'*\'', then: defaultUrl, else: redirect.source_host)}{redirect.source_path}" target="_blank">
+														<core:icon identifier="actions-view-page" />
+													</f:link.external>
+												</f:else>
+											</f:if>
+											<a class="btn btn-default"
+												 href="{rd:editRecord(command: 'edit', uid: redirect.uid)}"
+												 title="{f:translate(key: 'LLL:EXT:lang/Resources/Private/Language/locallang_mod_web_list.xlf:edit')}">
+												<core:icon identifier="actions-open" />
+											</a>
+											<f:if condition="{redirect.disabled} == 1">
+												<f:then>
+													<a class="btn btn-default" href="{rd:editRecord(command: 'unhide', uid: redirect.uid)}" title="{f:translate(key:'LLL:EXT:lang/Resources/Private/Language/locallang_mod_web_list.xlf:unHide')}"><core:icon identifier="actions-edit-unhide" /></a>
+												</f:then>
+												<f:else>
+													<a class="btn btn-default" href="{rd:editRecord(command: 'hide', uid: redirect.uid)}" title="{f:translate(key:'LLL:EXT:lang/Resources/Private/Language/locallang_mod_web_list.xlf:hide')}"><core:icon identifier="actions-edit-hide" /></a>
+												</f:else>
+											</f:if>
+											<a class="btn btn-default t3js-modal-trigger"
+												 href="{rd:editRecord(command: 'delete', uid: redirect.uid)}"
+												 title="{f:translate(key: 'LLL:EXT:lang/Resources/Private/Language/locallang_mod_web_list.xlf:delete')}"
+												 data-severity="warning"
+												 data-title="{f:translate(key: 'LLL:EXT:lang/Resources/Private/Language/locallang_alt_doc.xlf:label.confirm.delete_record.title')}"
+												 data-content="{f:translate(key: 'LLL:EXT:lang/Resources/Private/Language/locallang_alt_doc.xlf:deleteWarning')}"
+												 data-button-close-text="{f:translate(key: 'LLL:EXT:lang/Resources/Private/Language/locallang_alt_doc.xlf:buttons.confirm.delete_record.no')}">
+												<core:icon identifier="actions-delete" />
+											</a>
+										</div>
+									</td>
+								</tr>
+							</f:for>
+						</f:for>
+					</f:for>
+				</f:for>
+			</tbody>
+		</table>
+	</div>
+</f:section>
+</html>
Index: typo3/sysext/redirects/Resources/Public/Icons/Extension.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
--- typo3/sysext/redirects/Resources/Public/Icons/Extension.svg	(date 1515879118000)
+++ typo3/sysext/redirects/Resources/Public/Icons/Extension.svg	(date 1515879118000)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="iso-8859-1"?>
+<!-- Generator: Adobe Illustrator 13.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 14948)  -->
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
+	 width="64px" height="64px" viewBox="0 0 64 64" style="enable-background:new 0 0 64 64;" xml:space="preserve">
+<path style="fill:#5599FF;" d="M-0.5-0.5h64v64h-64V-0.5z"/>
+<path style="fill:#FFFFFF;" d="M31.9,18.254c3.639,0.008,6.943,1.439,9.385,3.771l1.961-1.959c0.828-0.832,2.25-0.244,2.25,0.932
+	v7.363c0,0.729-0.594,1.316-1.32,1.316h-7.359c-1.176,0-1.758-1.42-0.93-2.252l2.289-2.291c-1.695-1.584-3.887-2.469-6.219-2.484
+	c-5.076-0.045-9.354,4.061-9.309,9.303c0.039,4.977,4.072,9.148,9.227,9.148c2.258,0,4.395-0.806,6.082-2.281
+	c0.258-0.228,0.648-0.215,0.898,0.031l2.176,2.18c0.266,0.262,0.254,0.703-0.027,0.953c-2.414,2.18-5.617,3.508-9.129,3.508
+	c-7.523,0-13.619-6.094-13.619-13.617C18.252,24.361,24.385,18.242,31.9,18.254z"/>
+</svg>
Index: typo3/sysext/redirects/Resources/Public/Icons/mimetypes-x-sys_redirect.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Resources/Public/Icons/mimetypes-x-sys_redirect.svg	(date 1515879118000)
+++ typo3/sysext/redirects/Resources/Public/Icons/mimetypes-x-sys_redirect.svg	(date 1515879118000)
@@ -0,0 +1,1 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" style="enable-background:new 0 0 16 16;" xml:space="preserve"><path style="fill:#5599FF;" d="M15,12c0,1.657-1.344,3-3,3H4c-1.657,0-3-1.343-3-3V4c0-1.657,1.343-3,3-3h8c1.656,0,3,1.343,3,3V12z"/><path style="fill:#FFFFFF;" d="M8.007,4c1.069,0.002,2.039,0.423,2.757,1.107l0.576-0.575C11.582,4.287,12,4.46,12,4.805v2.162 c0,0.215-0.175,0.386-0.388,0.386H9.451c-0.345,0-0.517-0.417-0.273-0.66l0.673-0.673c-0.498-0.465-1.143-0.726-1.827-0.73 C6.533,5.278,5.276,6.484,5.29,8.023C5.302,9.484,6.486,10.709,8,10.709c0.663,0,1.292-0.236,1.787-0.668 c0.075-0.067,0.191-0.065,0.264,0.008l0.639,0.641c0.078,0.076,0.075,0.205-0.008,0.279C9.972,11.609,9.032,12,8,12 c-2.209,0-4-1.792-4-4C3.999,5.793,5.8,3.996,8.007,4z"/></svg>
Index: typo3/sysext/redirects/Tests/Unit/Evaluation/SourceHostTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Tests/Unit/Evaluation/SourceHostTest.php	(date 1515879118000)
+++ typo3/sysext/redirects/Tests/Unit/Evaluation/SourceHostTest.php	(date 1515879118000)
@@ -0,0 +1,82 @@
+<?php
+declare(strict_types = 1);
+
+namespace TYPO3\CMS\Redirects\Tests\Unit\Evaluation;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use TYPO3\CMS\Redirects\Evaluation\SourceHost;
+use TYPO3\TestingFramework\Core\Unit\UnitTestCase;
+
+class SourceHostTest extends UnitTestCase
+{
+    /**
+     * @return array
+     */
+    public function evaluateFieldValueWorksWithDifferentInputsDataProvider(): array
+    {
+        return [
+            // Valid formats
+            'www.domain.com' => ['www.domain.com', 'www.domain.com'],
+            'domain.com' => ['domain.com', 'domain.com'],
+            '127.0.0.1' => ['127.0.0.1', '127.0.0.1'],
+            '2001:0db8:85a3:08d3::0370:7344' => ['2001:0db8:85a3:08d3::0370:7344', '2001:0db8:85a3:08d3::0370:7344'],
+            'http://127.0.0.1' => ['http://127.0.0.1', '127.0.0.1'],
+            'http://www.domain.com' => ['http://www.domain.com', 'www.domain.com'],
+            'https://www.domain.com' => ['https://www.domain.com', 'www.domain.com'],
+            'http://www.domain.com/subfolder/index.php?id=123&foo=bar' => [
+                'http://www.domain.com/subfolder/index.php?id=123&foo=bar',
+                'www.domain.com'
+            ],
+            'https://www.domain.com/subfolder/index.php?id=123&foo=bar' => [
+                'https://www.domain.com/subfolder/index.php?id=123&foo=bar',
+                'www.domain.com'
+            ],
+            'http://www.domain.com/subfolder/' => ['http://www.domain.com/subfolder/', 'www.domain.com'],
+            'https://www.domain.com/subfolder/' => ['https://www.domain.com/subfolder/', 'www.domain.com'],
+            'http://[2001:0db8:85a3:08d3::0370:7344]/' => [
+                'http://[2001:0db8:85a3:08d3::0370:7344]/',
+                '2001:0db8:85a3:08d3::0370:7344'
+            ],
+            'www.domain.com/subfolder/' => ['www.domain.com/subfolder/', 'www.domain.com'],
+            'domain.com/subfolder/' => ['domain.com/subfolder/', 'domain.com'],
+            'www.domain.com/subfolder/index.php?id=123&foo=bar' => [
+                'www.domain.com/subfolder/index.php?id=123&foo=bar',
+                'www.domain.com'
+            ],
+            'domain.com/subfolder/index.php?id=123&foo=bar' => [
+                'domain.com/subfolder/index.php?id=123&foo=bar',
+                'domain.com'
+            ],
+            // special case, * means all domains
+            '*' => ['*', '*'],
+
+            // Invalid formats
+            'mailto:foo@typo3.org' => ['mailto:foo@typo3.org', ''],
+            'mailto:foo@typo3.org?subject=bar' => ['mailto:foo@typo3.org?subject=bar', ''],
+        ];
+    }
+
+    /**
+     * @test
+     * @dataProvider evaluateFieldValueWorksWithDifferentInputsDataProvider
+     * @param string $input
+     * @param string $expected
+     */
+    public function evaluateFieldValueWorksWithDifferentInputs(string $input, string $expected)
+    {
+        $subject = new SourceHost();
+        $this->assertSame($expected, $subject->evaluateFieldValue($input));
+    }
+}
Index: typo3/sysext/redirects/Tests/Unit/FormDataProvider/ValuePickerItemDataProviderTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Tests/Unit/FormDataProvider/ValuePickerItemDataProviderTest.php	(date 1515879118000)
+++ typo3/sysext/redirects/Tests/Unit/FormDataProvider/ValuePickerItemDataProviderTest.php	(date 1515879118000)
@@ -0,0 +1,110 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\Tests\Unit\FormDataProvider;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use Doctrine\DBAL\Driver\Statement;
+use Prophecy\Prophecy\ObjectProphecy;
+use TYPO3\CMS\Core\Database\ConnectionPool;
+use TYPO3\CMS\Core\Database\Query\QueryBuilder;
+use TYPO3\CMS\Core\Database\Query\Restriction\QueryRestrictionContainerInterface;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3\CMS\Redirects\FormDataProvider\ValuePickerItemDataProvider;
+use TYPO3\TestingFramework\Core\Unit\UnitTestCase;
+
+class ValuePickerItemDataProviderTest extends UnitTestCase
+{
+    protected $sysRedirectResultSet = [
+        'tableName' => 'sys_redirect',
+        'processedTca' => [
+            'columns' => [
+                'source_host' => [
+                    'config' => [
+                        'valuePicker' => [
+                            'items' => []
+                        ]
+                    ]
+                ]
+            ]
+        ]
+    ];
+
+    /**
+     * @test
+     */
+    public function addDataDoesNothingIfNoRedirectDataGiven()
+    {
+        $result = [
+            'tableName' => 'tt_content',
+        ];
+
+        $valuePickerItemDataProvider = new ValuePickerItemDataProvider();
+        $actualResult = $valuePickerItemDataProvider->addData($result);
+        self::assertSame($result, $actualResult);
+    }
+
+    /**
+     * @test
+     */
+    public function addDataAddsDomainNameAsKeyAndValueToRedirectValuePicker()
+    {
+        $statementProphecy = $this->setUpDatabase();
+        $statementProphecy->fetchAll()->willReturn(
+            [
+                ['domainName' => 'foo.test'],
+                ['domainName' => 'bar.test'],
+            ]
+        );
+        $valuePickerItemDataProvider = new ValuePickerItemDataProvider();
+        $actualResult = $valuePickerItemDataProvider->addData($this->sysRedirectResultSet);
+        $expected = $this->sysRedirectResultSet;
+        $expected['processedTca']['columns']['source_host']['config']['valuePicker']['items'] = [
+            ['foo.test', 'foo.test'],
+            ['bar.test', 'bar.test'],
+        ];
+        self::assertSame($expected, $actualResult);
+    }
+
+    /**
+     * @test
+     */
+    public function addDataDoesNotChangeResultSetIfNoSysDomainsAreFound()
+    {
+        $statementProphecy = $this->setUpDatabase();
+        $statementProphecy->fetchAll()->willReturn([]);
+        $valuePickerItemDataProvider = new ValuePickerItemDataProvider();
+        $actualResult = $valuePickerItemDataProvider->addData($this->sysRedirectResultSet);
+
+        self::assertSame($this->sysRedirectResultSet, $actualResult);
+    }
+
+    /**
+     * @return \Doctrine\DBAL\Driver\Statement|\Prophecy\Prophecy\ObjectProphecy
+     */
+    private function setUpDatabase(): ObjectProphecy
+    {
+        $queryBuilderProphecy = $this->prophesize(QueryBuilder::class);
+        $connectionPoolProphecy = $this->prophesize(ConnectionPool::class);
+        $connectionPoolProphecy->getQueryBuilderForTable('sys_domain')->willReturn($queryBuilderProphecy->reveal());
+        $queryRestrictionContainerProphecy = $this->prophesize(QueryRestrictionContainerInterface::class);
+        $queryBuilderProphecy->getRestrictions()->willReturn($queryRestrictionContainerProphecy->reveal());
+        $queryBuilderProphecy->select('domainName')->willReturn($queryBuilderProphecy->reveal());
+        $queryBuilderProphecy->from('sys_domain')->willReturn($queryBuilderProphecy->reveal());
+        $statementProphecy = $this->prophesize(Statement::class);
+        $queryBuilderProphecy->execute()->willReturn($statementProphecy->reveal());
+        GeneralUtility::addInstance(ConnectionPool::class, $connectionPoolProphecy->reveal());
+        return $statementProphecy;
+    }
+}
Index: typo3/sysext/redirects/Tests/Unit/Service/RedirectServiceTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/Tests/Unit/Service/RedirectServiceTest.php	(date 1515879118000)
+++ typo3/sysext/redirects/Tests/Unit/Service/RedirectServiceTest.php	(date 1515879118000)
@@ -0,0 +1,345 @@
+<?php
+declare(strict_types = 1);
+namespace TYPO3\CMS\Redirects\Tests\Unit\Service;
+
+/*
+ * This file is part of the TYPO3 CMS project.
+ *
+ * It is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License, either version 2
+ * of the License, or any later version.
+ *
+ * For the full copyright and license information, please read the
+ * LICENSE.txt file that was distributed with this source code.
+ *
+ * The TYPO3 project - inspiring people to share!
+ */
+
+use Prophecy\Argument;
+use Prophecy\Prophecy\ObjectProphecy;
+use Psr\Log\LoggerInterface;
+use TYPO3\CMS\Core\Http\Uri;
+use TYPO3\CMS\Core\LinkHandling\LinkService;
+use TYPO3\CMS\Core\Resource\Exception\InvalidPathException;
+use TYPO3\CMS\Core\Resource\File;
+use TYPO3\CMS\Core\Resource\Folder;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use TYPO3\CMS\Redirects\Service\RedirectCacheService;
+use TYPO3\CMS\Redirects\Service\RedirectService;
+use TYPO3\TestingFramework\Core\Unit\UnitTestCase;
+
+class RedirectServiceTest extends UnitTestCase
+{
+    /**
+     * @var RedirectCacheService|ObjectProphecy
+     */
+    protected $redirectCacheServiceProphecy;
+
+    /**
+     * @var RedirectService
+     */
+    protected $redirectService;
+
+    protected $singletonInstances = [];
+
+    protected function setUp()
+    {
+        parent::setUp();
+        $this->singletonInstances = GeneralUtility::getSingletonInstances();
+        $loggerProphecy = $this->prophesize(LoggerInterface::class);
+        $this->redirectCacheServiceProphecy = $this->prophesize(RedirectCacheService::class);
+        $this->redirectService = new RedirectService();
+        $this->redirectService->setLogger($loggerProphecy->reveal());
+    }
+
+    /**
+     * @test
+     */
+    public function matchRedirectReturnsNullIfNoRedirectsExist()
+    {
+        $this->redirectCacheServiceProphecy->getRedirects()->willReturn([]);
+        GeneralUtility::addInstance(RedirectCacheService::class, $this->redirectCacheServiceProphecy->reveal());
+
+        $result = $this->redirectService->matchRedirect('example.com', 'foo');
+
+        self::assertNull($result);
+    }
+
+    /**
+     * @test
+     */
+    public function matchRedirectReturnsRedirectOnFlatMatch()
+    {
+        $row = [
+            'target' => 'https://example.com',
+            'force_https' => '0',
+            'keep_query_parameters' => '0',
+            'target_statuscode' => '307'
+        ];
+        $this->redirectCacheServiceProphecy->getRedirects()->willReturn(
+            [
+                'example.com' => [
+                    'flat' => [
+                        'foo/' => [
+                            1 => $row,
+                        ],
+                    ],
+                ],
+            ]
+        );
+        GeneralUtility::addInstance(RedirectCacheService::class, $this->redirectCacheServiceProphecy->reveal());
+
+        $result = $this->redirectService->matchRedirect('example.com', 'foo');
+
+        self::assertSame($row, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function matchRedirectReturnsRedirectSpecificToDomainOnFlatMatchIfSpecificAndNonSpecificExist()
+    {
+        $row1 = [
+            'target' => 'https://example.com',
+            'force_https' => '0',
+            'keep_query_parameters' => '0',
+            'target_statuscode' => '307'
+        ];
+        $row2 = [
+            'target' => 'https://example.net',
+            'force_https' => '0',
+            'keep_query_parameters' => '0',
+            'target_statuscode' => '307'
+        ];
+        $this->redirectCacheServiceProphecy->getRedirects()->willReturn(
+            [
+                'example.com' => [
+                    'flat' => [
+                        'foo/' => [
+                            1 => $row1,
+                        ],
+                    ],
+                ],
+                '*' => [
+                    'flat' => [
+                        'foo/' => [
+                            2 => $row2,
+                        ],
+                    ],
+                ],
+            ]
+        );
+        GeneralUtility::addInstance(RedirectCacheService::class, $this->redirectCacheServiceProphecy->reveal());
+
+        $result = $this->redirectService->matchRedirect('example.com', 'foo');
+
+        self::assertSame($row1, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function matchRedirectReturnsRedirectOnRegexMatch()
+    {
+        $row = [
+            'target' => 'https://example.com',
+            'force_https' => '0',
+            'keep_query_parameters' => '0',
+            'target_statuscode' => '307'
+        ];
+        $this->redirectCacheServiceProphecy->getRedirects()->willReturn(
+            [
+                'example.com' => [
+                    'regexp' => [
+                        '/f.*?/' => [
+                            1 => $row,
+                        ],
+                    ],
+                ],
+            ]
+        );
+        GeneralUtility::addInstance(RedirectCacheService::class, $this->redirectCacheServiceProphecy->reveal());
+
+        $result = $this->redirectService->matchRedirect('example.com', 'foo');
+
+        self::assertSame($row, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function matchRedirectReturnsOnlyActiveRedirects()
+    {
+        $row1 = [
+            'target' => 'https://example.com',
+            'force_https' => '0',
+            'keep_query_parameters' => '0',
+            'target_statuscode' => '307',
+            'disabled' => '1'
+        ];
+        $row2 = [
+            'target' => 'https://example.net',
+            'force_https' => '0',
+            'keep_query_parameters' => '0',
+            'target_statuscode' => '307',
+            'disabled' => '0'
+        ];
+        $this->redirectCacheServiceProphecy->getRedirects()->willReturn(
+            [
+                'example.com' => [
+                    'flat' => [
+                        'foo/' => [
+                            1 => $row1,
+                            2 => $row2
+                        ],
+                    ],
+                ],
+            ]
+        );
+        GeneralUtility::addInstance(RedirectCacheService::class, $this->redirectCacheServiceProphecy->reveal());
+
+        $result = $this->redirectService->matchRedirect('example.com', 'foo');
+
+        self::assertSame($row2, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function getTargetUrlReturnsNullIfUrlCouldNotBeResolved()
+    {
+        $linkServiceProphecy = $this->prophesize(LinkService::class);
+        $linkServiceProphecy->resolve(Argument::any())->willThrow(new InvalidPathException('', 1516531195));
+        GeneralUtility::setSingletonInstance(LinkService::class, $linkServiceProphecy->reveal());
+
+        $result = $this->redirectService->getTargetUrl(['target' => 'invalid'], []);
+
+        self::assertNull($result);
+    }
+
+    /**
+     * @test
+     */
+    public function getTargetUrlReturnsUrlForTypeUrl()
+    {
+        $linkServiceProphecy = $this->prophesize(LinkService::class);
+        $redirectTargetMatch = [
+            'target' => 'https://example.com',
+        ];
+        $linkDetails = [
+            'type' => LinkService::TYPE_URL,
+            'url' => 'https://example.com/'
+        ];
+        $linkServiceProphecy->resolve($redirectTargetMatch['target'])->willReturn($linkDetails);
+        GeneralUtility::setSingletonInstance(LinkService::class, $linkServiceProphecy->reveal());
+
+        $result = $this->redirectService->getTargetUrl($redirectTargetMatch, []);
+
+        $uri = new Uri('https://example.com/');
+        self::assertEquals($uri, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function getTargetUrlReturnsUrlForTypeFile()
+    {
+        $linkServiceProphecy = $this->prophesize(LinkService::class);
+        $fileProphecy = $this->prophesize(File::class);
+        $fileProphecy->getPublicUrl()->willReturn('https://example.com/file.txt');
+        $redirectTargetMatch = [
+            'target' => 'https://example.com',
+        ];
+        $linkDetails = [
+            'type' => LinkService::TYPE_FILE,
+            'file' => $fileProphecy->reveal()
+        ];
+        $linkServiceProphecy->resolve($redirectTargetMatch['target'])->willReturn($linkDetails);
+        GeneralUtility::setSingletonInstance(LinkService::class, $linkServiceProphecy->reveal());
+
+        $result = $this->redirectService->getTargetUrl($redirectTargetMatch, []);
+
+        $uri = new Uri('https://example.com/file.txt');
+        self::assertEquals($uri, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function getTargetUrlReturnsUrlForTypeFolder()
+    {
+        $linkServiceProphecy = $this->prophesize(LinkService::class);
+        $folderProphecy = $this->prophesize(Folder::class);
+        $folderProphecy->getPublicUrl()->willReturn('https://example.com/folder/');
+        $redirectTargetMatch = [
+            'target' => 'https://example.com',
+        ];
+        $folder = $folderProphecy->reveal();
+        $linkDetails = [
+            'type' => LinkService::TYPE_FOLDER,
+            'folder' => $folder
+        ];
+        $linkServiceProphecy->resolve($redirectTargetMatch['target'])->willReturn($linkDetails);
+        GeneralUtility::setSingletonInstance(LinkService::class, $linkServiceProphecy->reveal());
+
+        $result = $this->redirectService->getTargetUrl($redirectTargetMatch, []);
+
+        $uri = new Uri('https://example.com/folder/');
+        self::assertEquals($uri, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function getTargetUrlRespectsForceHttps()
+    {
+        $linkServiceProphecy = $this->prophesize(LinkService::class);
+        $redirectTargetMatch = [
+            'target' => 'https://example.com',
+            'force_https' => '1'
+        ];
+        $linkDetails = [
+            'type' => LinkService::TYPE_URL,
+            'url' => 'http://example.com'
+        ];
+        $linkServiceProphecy->resolve($redirectTargetMatch['target'])->willReturn($linkDetails);
+        GeneralUtility::setSingletonInstance(LinkService::class, $linkServiceProphecy->reveal());
+
+        $result = $this->redirectService->getTargetUrl($redirectTargetMatch, []);
+
+        $uri = new Uri('https://example.com');
+        self::assertEquals($uri, $result);
+    }
+
+    /**
+     * @test
+     */
+    public function getTargetUrlAddsExistingQueryParams()
+    {
+        $linkServiceProphecy = $this->prophesize(LinkService::class);
+        $redirectTargetMatch = [
+            'target' => 'https://example.com',
+            'keep_query_parameters' => '1'
+        ];
+        $linkDetails = [
+            'type' => LinkService::TYPE_URL,
+            'url' => 'https://example.com/?foo=1&bar=2'
+        ];
+        $linkServiceProphecy->resolve($redirectTargetMatch['target'])->willReturn($linkDetails);
+        GeneralUtility::setSingletonInstance(LinkService::class, $linkServiceProphecy->reveal());
+
+        $result = $this->redirectService->getTargetUrl($redirectTargetMatch, ['bar' => 3, 'baz' => 4]);
+
+        $uri = new Uri('https://example.com/?bar=2&baz=4&foo=1');
+        self::assertEquals($uri, $result);
+    }
+
+    /**
+     * Tear down
+     */
+    public function tearDown()
+    {
+        GeneralUtility::resetSingletonInstances($this->singletonInstances);
+        parent::tearDown();
+    }
+}
Index: typo3/sysext/redirects/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/composer.json	(date 1515879118000)
+++ typo3/sysext/redirects/composer.json	(date 1515879118000)
@@ -0,0 +1,39 @@
+{
+	"name": "typo3/cms-redirects",
+	"type": "typo3-cms-framework",
+	"description": "Custom redirects in TYPO3.",
+	"homepage": "https://typo3.org",
+	"license": ["GPL-2.0-or-later"],
+	"authors": [{
+		"name": "TYPO3 Core Team",
+		"email": "typo3cms@typo3.org",
+		"role": "Developer"
+	}],
+	"require": {
+		"typo3/cms-core": "9.1.*@dev",
+		"typo3/cms-backend": "9.1.*@dev",
+		"typo3fluid/fluid": "^2.3"
+	},
+	"conflict": {
+		"typo3/cms": "*"
+	},
+	"replace": {
+		"redirects": "*"
+	},
+	"extra": {
+		"branch-alias": {
+			"dev-master": "9.1.x-dev"
+		},
+		"typo3/cms": {
+			"extension-key": "redirects",
+			"Package": {
+				"partOfFactoryDefault": true
+			}
+		}
+	},
+	"autoload": {
+		"psr-4": {
+			"TYPO3\\CMS\\Redirects\\": "Classes/"
+		}
+	}
+}
Index: typo3/sysext/redirects/ext_emconf.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/ext_emconf.php	(date 1515879118000)
+++ typo3/sysext/redirects/ext_emconf.php	(date 1515879118000)
@@ -0,0 +1,21 @@
+<?php
+$EM_CONF[$_EXTKEY] = [
+    'title' => 'Redirects',
+    'description' => 'Manage redirects for your TYPO3-based website.',
+    'category' => 'fe',
+    'author' => 'TYPO3 Core Team',
+    'author_email' => 'typo3cms@typo3.org',
+    'author_company' => '',
+    'state' => 'stable',
+    'uploadfolder' => 0,
+    'createDirs' => '',
+    'clearCacheOnLoad' => 0,
+    'version' => '9.1.0',
+    'constraints' => [
+        'depends' => [
+            'typo3' => '9.1.0-9.1.0'
+        ],
+        'conflicts' => [],
+        'suggests' => [],
+    ],
+];
Index: typo3/sysext/redirects/ext_localconf.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/ext_localconf.php	(date 1515879118000)
+++ typo3/sysext/redirects/ext_localconf.php	(date 1515879118000)
@@ -0,0 +1,26 @@
+<?php
+defined('TYPO3_MODE') or die();
+
+// Register hook into the frontend to check for a possible redirect
+$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['tslib/index_ts.php']['preprocessRequest']['redirects'] = \TYPO3\CMS\Redirects\Http\RedirectHandler::class . '->handle';
+
+// Rebuild cache in DataHandler on changing / inserting / adding redirect records
+$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_tcemain.php']['clearCachePostProc']['redirects'] = \TYPO3\CMS\Redirects\Hooks\DataHandlerCacheFlushingHook::class . '->rebuildRedirectCacheIfNecessary';
+
+// Inject sys_domains into valuepicker form
+$GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['formDataGroup']['tcaDatabaseRecord']
+[\TYPO3\CMS\Redirects\FormDataProvider\ValuePickerItemDataProvider::class] = [
+    'depends' => [
+        \TYPO3\CMS\Backend\Form\FormDataProvider\TcaInputPlaceholders::class,
+    ],
+];
+
+\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\TYPO3\CMS\Core\Imaging\IconRegistry::class)
+    ->registerIcon(
+        'mimetypes-x-sys_redirect',
+        \TYPO3\CMS\Core\Imaging\IconProvider\SvgIconProvider::class,
+        ['source' => 'EXT:redirects/Resources/Public/Icons/mimetypes-x-sys_redirect.svg']
+    );
+
+// Add validation call for form field source_host and source_path
+$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['tce']['formevals'][\TYPO3\CMS\Redirects\Evaluation\SourceHost::class] = '';
Index: typo3/sysext/redirects/ext_tables.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/ext_tables.php	(date 1515879118000)
+++ typo3/sysext/redirects/ext_tables.php	(date 1515879118000)
@@ -0,0 +1,16 @@
+<?php
+defined('TYPO3_MODE') or die();
+
+\TYPO3\CMS\Core\Utility\ExtensionManagementUtility::addModule(
+    'site',
+    'redirects',
+    '',
+    '',
+    [
+        'routeTarget' => \TYPO3\CMS\Redirects\Controller\ManagementController::class . '::handleRequest',
+        'access' => 'group,user',
+        'name' => 'site_redirects',
+        'icon' => 'EXT:redirects/Resources/Public/Icons/Extension.svg',
+        'labels' => 'LLL:EXT:redirects/Resources/Private/Language/locallang_module_redirect.xlf'
+    ]
+);
Index: typo3/sysext/redirects/ext_tables.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- typo3/sysext/redirects/ext_tables.sql	(date 1515879118000)
+++ typo3/sysext/redirects/ext_tables.sql	(date 1515879118000)
@@ -0,0 +1,32 @@
+#
+# Table structure for table 'sys_redirect'
+#
+CREATE TABLE sys_redirect (
+	uid int(11) unsigned NOT NULL auto_increment,
+	pid int(11) DEFAULT '0' NOT NULL,
+
+	source_host varchar(255) DEFAULT '' NOT NULL,
+	source_path varchar(255) DEFAULT '' NOT NULL,
+	is_regexp tinyint(1) unsigned DEFAULT '0' NOT NULL,
+
+	force_https tinyint(1) unsigned DEFAULT '0' NOT NULL,
+	keep_query_parameters tinyint(1) unsigned DEFAULT '0' NOT NULL,
+	target varchar(255) DEFAULT '' NOT NULL,
+	target_statuscode int(11) DEFAULT '0' NOT NULL,
+
+	hitcount int(11) DEFAULT '0' NOT NULL,
+	lasthiton int(11) DEFAULT '0' NOT NULL,
+	disable_hitcount tinyint(1) unsigned DEFAULT '0' NOT NULL,
+
+	createdby int(11) unsigned DEFAULT '0' NOT NULL,
+	createdon int(11) unsigned DEFAULT '0' NOT NULL,
+	updatedon int(11) unsigned DEFAULT '0' NOT NULL,
+	deleted tinyint(4) unsigned DEFAULT '0' NOT NULL,
+	disabled tinyint(4) unsigned DEFAULT '0' NOT NULL,
+	starttime int(11) unsigned DEFAULT '0' NOT NULL,
+	endtime int(11) unsigned DEFAULT '0' NOT NULL,
+
+	PRIMARY KEY (uid),
+	KEY parent (pid),
+	KEY index_source (source_host,source_path)
+);
